T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_log2_titer = runif(1, min = recoded_titer, max = next_dilution)) %>%
pull(continuous_log2_titer)
impute_continuous_titers <- function(log2_titer){
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_log2_titer = runif(1, min = recoded_titer, max = next_dilution)) %>%
pull(continuous_log2_titer)
}
2^sample(0:9, size = 8, replace = T)*10
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_log2_titer = runif(1, min = recoded_titer, max = next_dilution)) %>%
pull(continuous_log2_titer)
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_log2_titer = runif(1, min = recoded_titer, max = next_dilution))
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
))
impute_continuous_titers <- function(log2_titer){
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_log2_titer = runif(1, min = recoded_titer, max = next_dilution)) %>%
pull(continuous_log2_titer)
}
x
og(x, base= 2)
log(x, base= 2)
imputed_log2_x(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
x
log(x, base= 2)
log(x, base= 2)
impute_continuous_titers(log(x, base= 2))
x
log2_titer <- log(x, base= 2)
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_log2_titer = runif(1, min = recoded_titer, max = next_dilution))
impute_continuous_titers <- function(log2_titer){
tibble(original_titer = 2^log2_titer) %>%
# For any titers coded as 1:10, recode as 1:1
mutate(recoded_titer = case_when(
abs(original_titer - 10) < 1e-5 ~ 1,
T ~ original_titer
)) %>%
mutate(next_dilution = case_when(
recoded_titer == 1 ~ 20,
recoded_titer !=1 ~ recoded_titer*2
)) %>%
rowwise() %>%
mutate(continuous_titer = runif(1, min = recoded_titer, max = next_dilution),
continuous_log2_titer = log(continuous_titer, base = 2)) %>%
pull(continuous_log2_titer)
}
x
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
# First, estimate expected Cosine similarity of 8-dimensional vectors
# with elements uniformly drawn from discrete set of existing dilutions
null_cosine_sim <- replicate(100000,
{
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_x)
}
) %>% mean()
log2_titer
original_titer <- 2^log2_titer
original_titer
# For any titers coded as 1:10, recode as 1:1
original_titer[abs(original_titer) - 10 < 1e-5] <- 1
original_titer <- 2^log2_titer
# For any titers coded as 1:10, recode as 1:1
original_titer[abs(original_titer) - 10 < 1e-5] <- 1
original_titer
original_titer*ifelse(original_titer ==1, 20, 2)
next_dilutions <- original_titer*ifelse(original_titer ==1, 20, 2)
original_titer
next_dilutions
runif(length(original_titer), min = original_titer, max = next_dilutions)
impute_continuous_titers <- function(log2_titer){
original_titer <- 2^log2_titer
# For any titers coded as 1:10, recode as 1:1
original_titer[abs(original_titer) - 10 < 1e-5] <- 1
# Sample continuous value between original titer and next dilution
# (Next dilution is 20 if original titer coded as 1:1, *2 otherwise)
next_dilutions <- original_titer*ifelse(original_titer ==1, 20, 2)
continuous_titers <- runif(length(original_titer),
min = original_titer, max = next_dilutions)
return(log(continuous_titers, base = 2))
# tibble(original_titer = 2^log2_titer) %>%
#   # For any titers coded as 1:10, recode as 1:1
#   mutate(recoded_titer = case_when(
#     abs(original_titer - 10) < 1e-5 ~ 1,
#     T ~ original_titer
#   )) %>%
#   mutate(next_dilution = case_when(
#     recoded_titer == 1 ~ 20,
#     recoded_titer !=1 ~ recoded_titer*2
#   )) %>%
#   rowwise() %>%
#   mutate(continuous_titer = runif(1, min = recoded_titer, max = next_dilution),
#          continuous_log2_titer = log(continuous_titer, base = 2)) %>%
#   pull(continuous_log2_titer)
}
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
x
x
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
2^impute_continuous_titers(log(x, base= 2))
# First, estimate expected Cosine similarity of 8-dimensional vectors
# with elements uniformly drawn from discrete set of existing dilutions
null_cosine_sim <- replicate(100000,
{
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_x)
}
) %>% mean()
null_cosine_sim
# First, estimate expected Cosine similarity of 8-dimensional vectors
# with elements uniformly drawn from discrete set of existing dilutions
null_cosine_sim <- replicate(100000,
{
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
}
) %>% mean()
null_cosine_sim
null_cosine_sim
null_cosine_sim
titer1 = as.numeric(sera[sera$Sample_ID == indiv1 , c(3:10)])
titer2 = as.numeric(sera[sera$Sample_ID == indiv2 , c(3:10)])
# Re-calculate log2 titers without dividing by 10
titer1 <- log(2^titer1*10, base = 2)
titer2 <- log(2^titer2*10, base = 2)
titer1
titer2
titer1
impute_continuous_titers(titer1)
2^impute_continuous_titers(titer1)
titer1
2^titer1
2^impute_continuous_titers(titer1)
2^impute_continuous_titers(titer1)
2^impute_continuous_titers(titer1)
2^titer1
2^titer2
titer1 = as.numeric(sera[sera$Sample_ID == indiv1 , c(3:10)])
titer2 = as.numeric(sera[sera$Sample_ID == indiv2 , c(3:10)])
# Re-calculate log2 titers without dividing by 10
titer1 <- log(2^titer1*10, base = 2)
titer2 <- log(2^titer2*10, base = 2)
# Randomly impute continuous titer values
replicate(n = n_replicate_imputations,
{
continuous_titers1 <- impute_continuous_titers(titer1)
continuous_titers2 <- impute_continuous_titers(titer2)
tibble(cosine_sim = (cosine(continuous_titers1,  continuous_titers2)[1] - null_cosine_sim) / (1 - null_cosine_sim),
# Note that Spearman correlation will be NA if an individual has the same titer to all viruses
spearman_cor = cor.test(continuous_titers1,  continuous_titers2, method = 'spearman')$estimate)
}, simplify = F
) %>%
bind_rows() %>%
summarise(across(everything(), mean)) -> mean_stats_across_imputations
mean_stats_across_imputations
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
impute_continuous_titers(log(x, base= 2))
2^10
2^x
x
2^4
2^4.
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
# First, estimate expected Cosine similarity of 8-dimensional vectors
# with elements uniformly drawn from discrete set of existing dilutions
null_cosine_sim <- replicate(100000,
{
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
y <- 2^sample(0:9, size = 8, replace = T)*10
# Randomly impute continue titer values
imputed_log2_x <- impute_continuous_titers(log(x, base= 2))
imputed_log2_y <- impute_continuous_titers(log(y, base =2))
cosine(imputed_log2_x,
imputed_log2_y)
}
) %>% mean()
