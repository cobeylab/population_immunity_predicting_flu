y <- sample(unique_dilutions[1:3], size = 8, replace = T)
plot_function(x,y)
library(lsa)
library(dplyr)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
vector_length <- 8
unique_dilutions <- 2^(0:9)*10
axis_lims <- log(c(unique_dilutions[1], unique_dilutions[length(unique_dilutions)]), base = 2)
plot_function <- function(x,y){
log2x <- log(x, base = 2)
log2y <- log(y, base = 2)
cosine_sim <- (cosine(log2x,log2y) - null_cosine_sim)/(1 - null_cosine_sim)
spearman_cor <- cor.test(log2x, log2y)$estimate
labels_tibble <- tibble(
log2x = log(160, base = 2),
log2y = log(5120, base = 2),
cosine_label = paste0("Normalized cosine similarity = ", round(cosine_sim,2)),
cor_label = paste0("Spearman correlation = ", round(spearman_cor, 2))
)
# Because of position jitter, it's better to use the non-log values for plotting
tibble(log2x, log2y) %>%
ggplot(aes(x = log2x, y = log2y)) +
geom_point(size = 2, alpha = 0.5) +
scale_x_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
scale_y_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
geom_text(
data = labels_tibble,
aes(label = cosine_label)
) +
geom_text(
data = labels_tibble,
aes(label = cor_label),
position = position_nudge(y = -1 )
) +
xlab('Titer - Person A') +
ylab('Titer - Person A')
}
# Similar, uncorrelated
x <- sample(unique_dilutions[1:3], size = 8, replace = T)
y <- sample(unique_dilutions[1:3], size = 8, replace = T)
plot_function(x,y)
vector_length <- 8
unique_dilutions <- 2^(0:9)*10
null_cosine_sim <- 0.89 # Determined separately, changes if vector length and unique dilutions change
axis_lims <- log(c(unique_dilutions[1], unique_dilutions[length(unique_dilutions)]), base = 2)
plot_function <- function(x,y){
log2x <- log(x, base = 2)
log2y <- log(y, base = 2)
cosine_sim <- (cosine(log2x,log2y) - null_cosine_sim)/(1 - null_cosine_sim)
spearman_cor <- cor.test(log2x, log2y)$estimate
labels_tibble <- tibble(
log2x = log(160, base = 2),
log2y = log(5120, base = 2),
cosine_label = paste0("Normalized cosine similarity = ", round(cosine_sim,2)),
cor_label = paste0("Spearman correlation = ", round(spearman_cor, 2))
)
# Because of position jitter, it's better to use the non-log values for plotting
tibble(log2x, log2y) %>%
ggplot(aes(x = log2x, y = log2y)) +
geom_point(size = 2, alpha = 0.5) +
scale_x_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
scale_y_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
geom_text(
data = labels_tibble,
aes(label = cosine_label)
) +
geom_text(
data = labels_tibble,
aes(label = cor_label),
position = position_nudge(y = -1 )
) +
xlab('Titer - Person A') +
ylab('Titer - Person A')
}
# Similar, uncorrelated
x <- sample(unique_dilutions[1:3], size = 8, replace = T)
y <- sample(unique_dilutions[1:3], size = 8, replace = T)
plot_function(x,y)
plot_function <- function(x,y){
log2x <- log(x, base = 2)
log2y <- log(y, base = 2)
cosine_sim <- (cosine(log2x,log2y) - null_cosine_sim)/(1 - null_cosine_sim)
spearman_cor <- cor.test(log2x, log2y)$estimate
labels_tibble <- tibble(
log2x = log(160, base = 2),
log2y = log(5120, base = 2),
cosine_label = paste0("Normalized cosine similarity = ", round(cosine_sim,2)),
cor_label = paste0("Spearman correlation = ", round(spearman_cor, 2))
)
# Because of position jitter, it's better to use the non-log values for plotting
tibble(log2x, log2y) %>%
ggplot(aes(x = log2x, y = log2y)) +
geom_point(size = 2, alpha = 0.5) +
scale_x_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
scale_y_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
geom_text(
data = labels_tibble,
aes(label = cosine_label)
) +
geom_text(
data = labels_tibble,
aes(label = cor_label),
position = position_nudge(y = -1 )
) +
xlab('Titer - Person A') +
ylab('Titer - Person B')
}
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, uncorrelated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Dissimilar, uncorrelated
x <- sample(unique_dilutions, size = vector_length, replace = T)
y <- sample(unique_dilutions, size = vector_length, replace = T)
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, correlated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x <- sample(unique_dilutions[1:10], size = vector_length, replace = T)
y <- x * sample(c(1/2,1,2), size = length(x), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
library(lsa)
library(dplyr)
library(ggplot2)
library(cowplot)
theme_set(theme_cowplot())
vector_length <- 8
unique_dilutions <- 2^(0:9)*10
null_cosine_sim <- 0.89 # Determined separately, changes if vector length and unique dilutions change
axis_lims <- log(c(unique_dilutions[1], unique_dilutions[length(unique_dilutions)]), base = 2)
plot_function <- function(x,y){
log2x <- log(x, base = 2)
log2y <- log(y, base = 2)
cosine_sim <- (cosine(log2x,log2y) - null_cosine_sim)/(1 - null_cosine_sim)
spearman_cor <- cor.test(log2x, log2y)$estimate
labels_tibble <- tibble(
log2x = log(160, base = 2),
log2y = log(5120, base = 2),
cosine_label = paste0("Normalized cosine similarity = ", round(cosine_sim,2)),
cor_label = paste0("Spearman correlation = ", round(spearman_cor, 2))
)
# Because of position jitter, it's better to use the non-log values for plotting
tibble(log2x, log2y) %>%
ggplot(aes(x = log2x, y = log2y)) +
geom_point(size = 2, alpha = 0.5) +
scale_x_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
scale_y_continuous(breaks = log(unique_dilutions, base = 2), labels = function(x){2^x},
limits = axis_lims) +
geom_text(
data = labels_tibble,
aes(label = cosine_label)
) +
geom_text(
data = labels_tibble,
aes(label = cor_label),
position = position_nudge(y = -1 )
) +
xlab('Titer - Person A') +
ylab('Titer - Person B')
}
# Similar, uncorrelated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, uncorrelated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
# Similar, uncorrelated
x <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
y <- sample(unique_dilutions[1:3], size = vector_length, replace = T) * sample(c(1/2,1,2), size = length(vector_length), replace = T, prob = c(0.1,0.8,0.1))
plot_function(x,y)
x
length(x)
length(y)
setwd("~/Projects/population_immunity_predicting_flu/Analyses/correlation_and_clustering/src")
library(ggplot2)
library(cowplot)
library(dplyr)
library(tidyr)
library(reshape2)
library(lsa)
library(stringr)
#read titer data
source("../../../Data/script/load_data/load_data.R")
cosine_theme = theme_bw() + theme(
axis.text.x = element_text(size=8),
axis.text.y = element_text(size=8),
axis.title = element_text(size=9),
strip.text = element_text(size=8),
legend.title=element_text(size=8),
legend.text = element_text(size=8),
legend.key.size = unit(0.35, "cm"),
panel.grid = element_blank(),
strip.background = element_rect(fill = "white", colour = "white"))
# Randomly sample titer from the observed dilutions
x <- 2^sample(0:9, size = 8, replace = T)*10
log2_titer <- x
x
log2_titer <- log(x, base = 2)
log2()
log2_titer
original_titer <- 2^log2_titer
# For any titers coded as 1:10, recode as 1:1
original_titer[abs(original_titer) - 10 < 1e-5] <- 1
original_titer
original_titer*ifelse(original_titer ==1, 20, 2)
# Sample continuous value between original titer and next dilution
# (Next dilution is 20 if original titer coded as 1:1, *2 otherwise)
next_dilutions <- original_titer*ifelse(original_titer ==1, 20, 2)
runif(length(original_titer),
min = original_titer, max = next_dilutions)
original_titer
next_dilutions
